name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for git commit info
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Get dependencies
      run: go mod download
    
    - name: Get build info
      id: build_info
      run: |
        echo "BUILD_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
        echo "GIT_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        # Determine binary name and extension
        BINARY_NAME="doc-viewer"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="${BINARY_NAME}.exe"
        fi
        
        # Build with version information
        go build -v \
          -ldflags="-s -w -X 'main.version=${{ steps.build_info.outputs.VERSION }}' -X 'main.buildDate=${{ steps.build_info.outputs.BUILD_DATE }}' -X 'main.gitCommit=${{ steps.build_info.outputs.GIT_COMMIT }}'" \
          -o ${BINARY_NAME} .
        
        # Create archive
        if [ "$GOOS" = "windows" ]; then
          ARCHIVE_NAME="doc-viewer-${GOOS}-${GOARCH}.zip"
          zip ${ARCHIVE_NAME} ${BINARY_NAME}
        else
          ARCHIVE_NAME="doc-viewer-${GOOS}-${GOARCH}.tar.gz"
          tar -czf ${ARCHIVE_NAME} ${BINARY_NAME}
        fi
        
        echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
        echo "BINARY_NAME=${BINARY_NAME}" >> $GITHUB_ENV
    
    - name: Upload Release Asset
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.ARCHIVE_NAME }}
        path: ${{ env.ARCHIVE_NAME }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
        body: |
          ## Changes in this Release
          - Auto-generated release for ${{ github.ref }}
          
          ## Downloads
          Choose the appropriate binary for your operating system:
          - **Linux**: `doc-viewer-linux-amd64.tar.gz` or `doc-viewer-linux-arm64.tar.gz`
          - **macOS**: `doc-viewer-darwin-amd64.tar.gz` or `doc-viewer-darwin-arm64.tar.gz` 
          - **Windows**: `doc-viewer-windows-amd64.zip`
          
          ## Version Information
          - Version: ${{ github.ref_name }}
          - Build Date: ${{ steps.build_info.outputs.BUILD_DATE }}
          - Git Commit: ${{ steps.build_info.outputs.GIT_COMMIT }}
    
    - name: Upload Release Assets
      run: |
        for file in ./artifacts/*/; do
          filename=$(basename "$file")
          filepath="$file$filename"
          if [ -f "$filepath" ]; then
            echo "Uploading $filepath"
            gh release upload ${{ github.ref_name }} "$filepath"
          fi
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

