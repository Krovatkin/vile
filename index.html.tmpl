<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Browser</title>
    <link href="https://cdn.jsdelivr.net/npm/daisyui@4.4.19/dist/full.css" rel="stylesheet" type="text/css" />
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- GLightbox CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/glightbox/dist/css/glightbox.min.css">
</head>
<body class="bg-gray-100 min-h-screen p-4">
    <div class="w-full max-w-none mx-4 md:w-3/4 md:max-w-4xl md:mx-auto">
        <!-- Tab Bar -->
        <div class="flex items-center gap-2 mb-4">
            <div id="tabsContainer" class="flex gap-1 flex-wrap"></div>
            <button id="addTabBtn" class="btn btn-sm rounded-md bg-blue-400 hover:bg-blue-500 text-white border-blue-400">+</button>
        </div>

        <!-- File Operations Bar -->
        <div class="flex items-center gap-2 mb-4 p-2 bg-white rounded-lg shadow-sm">
            <button id="backButton" class="btn btn-sm btn-ghost hidden" onclick="navigateBack()">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                </svg>
                Back
            </button>
            <div id="backDivider" class="divider divider-horizontal hidden"></div>
            <button id="copyBtn" class="btn btn-sm btn-ghost disabled:opacity-50" disabled onclick="copyFiles()">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                </svg>
                Copy
            </button>
            <button id="cutBtn" class="btn btn-sm btn-ghost disabled:opacity-50" disabled onclick="cutSelectedFiles()">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6-4h8a2 2 0 012 2v8a2 2 0 01-2 2H8a2 2 0 01-2-2V8a2 2 0 012-2z"></path>
                </svg>
                Cut
            </button>
            <button id="pasteBtn" class="btn btn-sm btn-ghost disabled:opacity-50" disabled onclick="pasteFiles()">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                </svg>
                Paste
            </button>
            <div class="divider divider-horizontal"></div>
            <span id="selectionCount" class="text-sm text-gray-500">No items selected</span>
        </div>

        <!-- Original Content (back button removed) -->
        <div class="collapse collapse-arrow bg-blue-100">
            <input type="checkbox" checked />
            <div class="collapse-title text-xl font-medium">
                üìÅ <span id="currentPath">/</span>
            </div>
            <div class="collapse-content">
                <ul class="menu bg-base-100 rounded-box p-2" id="fileList">
                    <!-- Content will be populated by WebSocket -->
                </ul>

                <!-- Loading Spinner -->
                <div id="loadingSpinner" class="flex justify-center items-center p-4 hidden">
                    <span class="loading loading-spinner loading-md text-blue-600"></span>
                    <span class="ml-2 text-sm text-gray-600">Loading files...</span>
                </div>
            </div>
        </div>
    </div>

    <!-- GLightbox JS (no dependencies!) -->
    <script src="https://cdn.jsdelivr.net/gh/mcstudios/glightbox/dist/js/glightbox.min.js"></script>

    <script>
        // URL parameter handling functions
        function getPathFromURL() {
            const urlParams = new URLSearchParams(window.location.search);
            const pathParam = urlParams.get('path');
            return pathParam ? decodeURIComponent(pathParam) : '';
        }

        function updateURLPath(path) {
            const url = new URL(window.location);
            if (path === '') {
                url.searchParams.delete('path');
            } else {
                url.searchParams.set('path', encodeURIComponent(path));
            }
            
            // Update URL without reloading the page
            window.history.pushState({ path: path }, '', url);
        }

        // Handle browser back/forward buttons
        window.addEventListener('popstate', function(event) {
            if (event.state && event.state.path !== undefined) {
                // Navigate to the path from history state
                navigateToFolder(event.state.path);
            } else {
                // Fallback to reading from URL
                const pathFromURL = getPathFromURL();
                navigateToFolder(pathFromURL);
            }
        });

        // Tab state management
        let tabCounter = 0;
        let activeTabId = null;
        let tabStates = new Map();

        const defaultColorMap = new Map([
            ['image', 'text-green-600 hover:bg-green-50'],
            ['document', 'text-purple-600 hover:bg-purple-50'],
            ['file', 'text-blue-600 hover:bg-blue-50'],
            ['folder', 'text-yellow-600 hover:bg-yellow-50']
        ]);

        // Global selected files set
        let selected = new Set();

        // File operation sets
        let copiedFiles = new Set();
        let cutFiles = new Set();

        // Tab state structure
        class TabState {
            constructor() {
                this.currentPath = '';
                this.ws = null;
                this.hasFolders = false;
                this.hasFiles = false;
                this.dividerAdded = false;
                //this.selected = new Set();
            }
        }

        // Update button states based on selection and clipboard
        function updateButtonStates() {
            const copyBtn = document.getElementById('copyBtn');
            const cutBtn = document.getElementById('cutBtn');
            const pasteBtn = document.getElementById('pasteBtn');
            const selectionCount = document.getElementById('selectionCount');

            // Update selection count display
            const count = selected.size;
            if (count === 0) {
                selectionCount.textContent = 'No items selected';
            } else {
                selectionCount.textContent = `${count} item${count > 1 ? 's' : ''} selected`;
            }

            // Enable/disable copy and cut based on selection
            if (selected.size > 0) {
                copyBtn.disabled = false;
                cutBtn.disabled = false;
                copyBtn.classList.remove('disabled:opacity-50');
                cutBtn.classList.remove('disabled:opacity-50');
            } else {
                copyBtn.disabled = true;
                cutBtn.disabled = true;
                copyBtn.classList.add('disabled:opacity-50');
                cutBtn.classList.add('disabled:opacity-50');
            }

            // Enable/disable paste based on clipboard content
            if (copiedFiles.size > 0 || cutFiles.size > 0) {
                pasteBtn.disabled = false;
                pasteBtn.classList.remove('disabled:opacity-50');
            } else {
                pasteBtn.disabled = true;
                pasteBtn.classList.add('disabled:opacity-50');
            }
        }

        // Copy files operation
        function copyFiles() {
            if (selected.size === 0) return;

            // Clear cut files and add to copied files
            cutFiles.clear();
            copiedFiles = new Set(selected);

            console.log('Copied files:', Array.from(copiedFiles));
            
            // Clear selection
            clearSelection();
            updateButtonStates();

            // Show feedback
            showNotification(`${copiedFiles.size} item${copiedFiles.size > 1 ? 's' : ''} copied`, 'success');
        }

        // Cut files operation
        function cutSelectedFiles() {
            if (selected.size === 0) return;

            // Clear copied files and add to cut files
            copiedFiles.clear();
            cutFiles = new Set(selected);

            console.log('Cut files:', Array.from(cutFiles));
            
            // Clear selection
            clearSelection();
            updateButtonStates();

            // Show feedback
            showNotification(`${cutFiles.size} item${cutFiles.size > 1 ? 's' : ''} cut`, 'warning');
        }

        // Paste files operation
        function pasteFiles() {
            if (copiedFiles.size === 0 && cutFiles.size === 0) return;

            const filesToPaste = copiedFiles.size > 0 ? copiedFiles : cutFiles;
            const operation = copiedFiles.size > 0 ? 'copy' : 'move';

            console.log(`Pasting ${filesToPaste.size} files with ${operation} operation:`, Array.from(filesToPaste));
            console.log('Target directory:', currentPath);

            // Prepare request parameters
            const params = new URLSearchParams();
            filesToPaste.forEach(file => {
                params.append('srcs', file);
            });
            params.append('action', operation === 'copy' ? 'copy' : 'paste');
            params.append('dest', currentPath);

            // Clear clipboard before making request
            const fileCount = filesToPaste.size;
            copiedFiles.clear();
            cutFiles.clear();
            updateButtonStates();

            // Make GET request to server with parameters in URL
            fetch(`/manage?${params.toString()}`)
            .then(response => response.json())
            .then(data => {
                if (data.status === 'ok') {
                    showNotification(`${fileCount} item${fileCount > 1 ? 's' : ''} ${operation === 'copy' ? 'copied' : 'moved'} successfully`, 'info');
                    navigateToFolder(currentPath);
                } else {
                    showNotification(data.error, 'error');
                }
            })
            .catch(error => {
                console.error('Error pasting files:', error);
                showNotification('Failed to paste files', 'error');
            });
        }


        // Show notification (simple implementation)
        function showNotification(message, type = 'info') {
            // Create notification element
            const notification = document.createElement('div');
            notification.className = `alert alert-${type} fixed top-4 right-4 w-auto max-w-md z-50 shadow-lg`;
            notification.innerHTML = `
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span>${message}</span>
            `;

            document.body.appendChild(notification);

            // Remove after 3 seconds
            setTimeout(() => {
                notification.remove();
            }, 3000);
        }

        // Clear selection and update UI
    function clearSelection() {
        // Handle any element with selection classes and restore using defaultColorMap
        document.querySelectorAll('.\\!bg-blue-200.\\!text-white').forEach(element => {
            const fileType = element.dataset.fileType;
            element.className = defaultColorMap.get(fileType);
        });
        
        // Clear the selection set
        selected.clear();
        updateButtonStates();
    }

        // Save current global state to active tab
        function saveCurrentStateToTab() {
            if (activeTabId && tabStates.has(activeTabId)) {
                const state = tabStates.get(activeTabId);
                state.currentPath = currentPath;
                state.ws = ws;
                state.hasFolders = hasFolders;
                state.hasFiles = hasFiles;
                state.dividerAdded = dividerAdded;
                state.selected = new Set(selected);
            }
        }

        // Helper function to clear content and load tab state
        function clearAndLoadTabState(tabId) {
            // Clear current HTML content
            fileListElement.innerHTML = '';

            // Close WebSocket if open
            if (ws) {
                ws.close();
                ws = null;
            }

            // Clear selection when switching tabs
            clearSelection();

            // Get tab state
            const state = tabStates.get(tabId);
            if (state) {
                // Set global variables from tab state
                currentPath = state.currentPath;
                ws = state.ws;
                hasFolders = state.hasFolders;
                hasFiles = state.hasFiles;
                dividerAdded = state.dividerAdded;
                selected = new Set(); // Start with empty selection on tab switch

                // Navigate to the folder
                navigateToFolder(currentPath);
            }
        }

        function createTab() {
            const tabId = `tab-${++tabCounter}`;

            // Create new state and copy current global state
            const newState = new TabState();
            newState.currentPath = currentPath;
            newState.hasFolders = hasFolders;
            newState.hasFiles = hasFiles;
            newState.dividerAdded = dividerAdded;
            newState.selected = new Set(); // New tabs start with empty selection
            // Note: don't copy ws, each tab needs its own connection

            tabStates.set(tabId, newState);

            const tabElement = document.createElement('div');
            tabElement.className = 'btn btn-sm btn-outline flex items-center gap-2';
            tabElement.id = `tab-header-${tabId}`;
            tabElement.innerHTML = `
                <span onclick="switchToTab('${tabId}')" class="cursor-pointer">Tab ${tabCounter}</span>
                <button onclick="closeTab('${tabId}'); event.stopPropagation();" class="btn btn-xs btn-circle btn-ghost">√ó</button>
            `;

            document.getElementById('tabsContainer').appendChild(tabElement);
            switchToTab(tabId);
            return tabId;
        }

        function switchToTab(tabId) {
            // Save current state to the currently active tab
            saveCurrentStateToTab();

            // Deactivate all tabs
            document.querySelectorAll('#tabsContainer .btn').forEach(el => {
                el.classList.remove('btn-active');
                el.classList.add('btn-outline');
            });

            // Activate selected tab
            const tabHeader = document.getElementById(`tab-header-${tabId}`);
            if (tabHeader) {
                tabHeader.classList.add('btn-active');
                tabHeader.classList.remove('btn-outline');
                activeTabId = tabId;

                // Clear and load the new tab state
                clearAndLoadTabState(tabId);
            }
        }

        function closeTab(tabId) {
            // Don't close if it's the last tab
            if (tabStates.size <= 1) {
                return;
            }

            const tabHeader = document.getElementById(`tab-header-${tabId}`);
            if (tabHeader) {
                tabHeader.remove();
            }

            // Close WebSocket if it exists
            const state = tabStates.get(tabId);
            if (state && state.ws) {
                state.ws.close();
            }

            // Remove state
            tabStates.delete(tabId);

            // If this was the active tab, switch to another
            if (activeTabId === tabId) {
                const remainingTabs = document.querySelectorAll('#tabsContainer .btn');
                if (remainingTabs.length > 0) {
                    const firstTabId = remainingTabs[0].id.replace('tab-header-', '');
                    switchToTab(firstTabId);
                }
            }
        }

        function addNewTab() {
            createTab();
        }

        // File selection toggle - supports multi-select
        function toggleFileSelection(element) {
            const itemType = element.dataset.fileType;
            const filePath = element.dataset.path;
            const selectionClassStr = '!bg-blue-200 !text-white'


            if (selected.has(filePath)) {
                // Remove from selection
                selected.delete(filePath);
                element.className = defaultColorMap.get(itemType);
            } else {
                // Add to selection
                selected.add(filePath);
                element.className = selectionClassStr;
            }
            
            console.log('Selected files:', Array.from(selected));
            updateButtonStates(); // Update button states after selection change
        }

        // Original code with document support added
        let lightbox;

        // Check if file is an image
        function isImageFile(filename) {
            const imageExtensions = ['.jpg', '.jpeg', '.png'];
            const ext = filename.toLowerCase().substring(filename.lastIndexOf('.'));
            return imageExtensions.includes(ext);
        }

        // Check if file is a document
        function isDocumentFile(filename) {
            const documentExtensions = ['.docx', '.doc', '.xls', '.xlsx', '.ppt', '.pptx', '.pdf'];
            const ext = filename.toLowerCase().substring(filename.lastIndexOf('.'));
            return documentExtensions.includes(ext);
        }

        // Get appropriate icon for file type
        function getFileIcon(filename, type) {
            if (type === 'image' || isImageFile(filename)) {
                return `
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z" clip-rule="evenodd"></path>
                    </svg>
                `;
            } else if (type === 'document' || isDocumentFile(filename)) {
                // Document icon
                return `
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clip-rule="evenodd"></path>
                        <path d="M8 8a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1zm0 4a1 1 0 011-1h6a1 1 0 110 2H9a1 1 0 01-1-1z"></path>
                    </svg>
                `;
            } else {
                // Generic file icon
                return `
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 6a1 1 0 011-1h6a1 1 0 110 2H7a1 1 0 01-1-1zm1 3a1 1 0 100 2h6a1 1 0 100-2H7z" clip-rule="evenodd"></path>
                    </svg>
                `;
            }
        }

        // Get file type emoji
        function getFileEmoji(filename, type) {
            if (type === 'image' || isImageFile(filename)) {
                return 'üñºÔ∏è';
            } else if (type === 'document' || isDocumentFile(filename)) {
                const ext = filename.toLowerCase().substring(filename.lastIndexOf('.'));
                switch (ext) {
                    case '.pdf': return 'üìÑ';
                    case '.docx':
                    case '.doc': return 'üìù';
                    case '.xlsx':
                    case '.xls': return 'üìä';
                    case '.pptx':
                    case '.ppt': return 'üìã';
                    default: return 'üìÑ';
                }
            }
            return 'üìÑ';
        }

        // Reinitialize lightbox after adding new images
        function reinitializeLightbox() {
            if (lightbox) {
                lightbox.destroy();
            }
            lightbox = GLightbox({
                selector: 'none',
                // openEffect: 'none',
                // touchNavigation: true,
                // loop: true,
                // autoplayVideos: false
            });

            lightbox.on('open', function() {
                const nextBtn = document.querySelector('.gnext');
                const prevBtn = document.querySelector('.gprev');
                
                if (nextBtn) {
                    nextBtn.onclick = function(e) {
                        e.preventDefault();
                        
                        // Find next image element in DOM
                        const currentHref = lightbox.elements[0].href;
                        const nextElement = findImageElement(currentHref, 1); // +1 for next
                        
                        if (nextElement) {
                            lightbox.setElements([
                                {
                                    href: nextElement.href,
                                    title: nextElement.getAttribute('data-title'),
                                    description: nextElement.getAttribute('data-description')
                                }
                            ]);
                            lightbox.goToSlide(0); // Go to the only image (index 0)
                        }
                    };
                }
                
                if (prevBtn) {
                    prevBtn.onclick = function(e) {
                        e.preventDefault();
                        
                        // Find previous image element in DOM
                        const currentHref = lightbox.elements[0].href;
                        const prevElement = findImageElement(currentHref, -1); // -1 for previous
                        
                        if (prevElement) {
                            lightbox.setElements([
                                {
                                    href: prevElement.href,
                                    title: prevElement.getAttribute('data-title'),
                                    description: prevElement.getAttribute('data-description')
                                }
                            ]);
                            lightbox.goToSlide(0); // Go to the only image (index 0)
                        }
                    };
                }
            });       

        }

        function openLightbox(element) {
            lightbox.setElements([
                {
                    href: element.href,
                    title: element.getAttribute('data-title'),
                    description: element.getAttribute('data-description')
                }
            ]);
            lightbox.open();
        }

        function findImageElement(currentHref, direction) {
            // Get all image links in DOM
            const imageLinks = document.querySelectorAll('a[href^="/image?path="]');
            const imageArray = Array.from(imageLinks);
            
            // Find current element index
            const currentIndex = imageArray.findIndex(el => el.href === currentHref);
            
            if (currentIndex !== -1) {
                let newIndex;
                
                if (direction === 1) {
                    // Next: wrap to first if at end
                    newIndex = (currentIndex + 1) % imageArray.length;
                } else if (direction === -1) {
                    // Previous: wrap to last if at beginning
                    newIndex = currentIndex === 0 ? imageArray.length - 1 : currentIndex - 1;
                }
                
                return imageArray[newIndex];
            }
            
            return null;
        }


        // Templates
        const folderTemplate = (name, path) => `
            <li>
                <a href="javascript:void(0)" 
                    ondblclick="navigateToFolder('${path.replace(/'/g, "\\'")}')" class="text-yellow-600 hover:bg-yellow-50" 
                    onclick="event.preventDefault(); toggleFileSelection(this);"
                    data-file-type="folder"
                    data-path="${path}">
                    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M2 6a2 2 0 012-2h5l2 2h5a2 2 0 012 2v6a2 2 0 01-2 2H4a2 2 0 01-2-2V6z"></path>
                    </svg>
                    ${name}
                </a>
            </li>
        `;

        const fileTemplate = (name, path, type) => {
            const isImage = type === 'image' || isImageFile(name);
            const isDocument = type === 'document' || isDocumentFile(name);
            const isSelected = selected.has(path);
            
            let colorClass, fileType, icon
            // let emoji;
            
            if (isImage) {
                fileType = 'image';
                colorClass = isSelected ? '!bg-blue-200 !text-white' : 'text-green-600 hover:bg-green-50';
                icon = getFileIcon(name, 'image');
                //emoji = getFileEmoji(name, 'image');
            } else if (isDocument) {
                fileType = 'document';
                colorClass = isSelected ? '!bg-blue-200 !text-white' : 'text-purple-600 hover:bg-purple-50';
                icon = getFileIcon(name, 'document');
                //emoji = getFileEmoji(name, 'document');
            } else {
                fileType = 'file';
                colorClass = isSelected ? '!bg-blue-200 !text-white' : 'text-blue-600 hover:bg-blue-50';
                icon = getFileIcon(name, 'file');
                //emoji = getFileEmoji(name, 'file');
            }

            const fileId = `file-${path.replace(/[^a-zA-Z0-9]/g, '-')}`;

            // ${name} ${emoji}
            if (isImage) {
                
                const imageUrl = `/image?path=${encodeURIComponent(path)}`;
                return `
                    <li>
                        <a href="${imageUrl}" 
                           id="${fileId}"
                           class="glightbox file-item ${colorClass}" 
                           data-gallery="gallery" 
                           data-title="${name}"
                           data-file-type="${fileType}"
                           data-path="${path}"
                           onclick="event.preventDefault(); toggleFileSelection(this);"
                           ondblclick="event.stopPropagation(); openLightbox(this);">
                            ${icon}
                            ${name}
                        </a>
                    </li>
                `;
            } else if (isDocument) {
                fileType = 'document';
                colorClass = isSelected ? '!bg-blue-200 !text-white' : 'text-purple-600 hover:bg-purple-50';
                icon = getFileIcon(name, 'document');
                //emoji = getFileEmoji(name, 'document');
                const docViewerUrl = `/doc_viewer?path=${encodeURIComponent(path)}`;
                return `
                    <li>
                        <a href="${docViewerUrl}"
                        id="${fileId}"
                        class="file-item ${colorClass}"
                        data-file-type="${fileType}"
                        data-path="${path}"
                        onclick="event.preventDefault(); toggleFileSelection(this);"
                        ondblclick="event.stopPropagation(); window.open('${docViewerUrl}', '_blank');">
                            ${icon}
                            ${name}
                        </a>
                    </li>
                `;
                //emoji = getFileEmoji(name, 'document');
            } else {
                return `
                    <li>
                        <a href="javascript:void(0)" 
                           id="${fileId}"
                           class="file-item ${colorClass}"
                           data-file-type="${fileType}"
                           data-path="${path}"
                           onclick="toggleFileSelection(this);">
                            ${icon}
                            ${name}
                        </a>
                    </li>
                `;
            }
        };

        const dividerTemplate = () => `<div class="divider my-1"></div>`;

        // Global variables (start with defaults)
        let ws = null;
        let currentPath = '';
        let hasFolders = false;
        let hasFiles = false;
        let dividerAdded = false;

        // DOM elements
        const fileListElement = document.getElementById('fileList');
        const spinnerElement = document.getElementById('loadingSpinner');
        const currentPathElement = document.getElementById('currentPath');
        const backButtonElement = document.getElementById('backButton');
        const backDividerElement = document.getElementById('backDivider');

        // Show/hide spinner
        function showSpinner() {
            spinnerElement.classList.remove('hidden');
        }

        function hideSpinner() {
            spinnerElement.classList.add('hidden');
            // Reinitialize lightbox when loading is complete
            setTimeout(reinitializeLightbox, 100);
        }

        // Update back button visibility
        function updateBackButton() {
            if (currentPath === '') {
                backButtonElement.classList.add('hidden');
                backDividerElement.classList.add('hidden');
            } else {
                backButtonElement.classList.remove('hidden');
                backDividerElement.classList.remove('hidden');
            }
        }

        // Clear file list and reset state
        function clearFileList() {
            fileListElement.innerHTML = '';
            hasFolders = false;
            hasFiles = false;
            dividerAdded = false;
        }

        // Append HTML immediately to the file list
        function appendToFileList(html) {
            fileListElement.insertAdjacentHTML('beforeend', html);
        }

        // Add divider between folders and files if needed
        function addDividerIfNeeded() {
            if (hasFolders && hasFiles && !dividerAdded) {
                appendToFileList(dividerTemplate());
                dividerAdded = true;
            }
        }

        // Handle incoming WebSocket messages
        function handleMessage(event) {
            try {
                const data = JSON.parse(event.data);
                console.log('Received:', data);

                // If empty array, hide spinner and stop
                if (Array.isArray(data) && data.length === 0) {
                    hideSpinner();
                    return;
                }

                // Show spinner when we start receiving data
                if (Array.isArray(data) && data.length > 0) {
                    showSpinner();
                }

                // Process each item in the array and append immediately
                data.forEach(item => {
                    if (item.type === 'folder') {
                        if (!hasFolders) {
                            hasFolders = true;
                        }
                        appendToFileList(folderTemplate(item.name, item.path));
                    } else if (item.type === 'file' || item.type === 'image' || item.type === 'document') {
                        if (!hasFiles) {
                            hasFiles = true;
                            addDividerIfNeeded();
                        }
                        appendToFileList(fileTemplate(item.name, item.path, item.type));
                    }
                });

            } catch (error) {
                console.error('Error parsing WebSocket message:', error);
            }
        }

        // Connect to WebSocket
        function connectWebSocket(path) {
            if (ws) {
                ws.close();
            }

            clearFileList();
            showSpinner();

            currentPath = path;
            // Display path with leading slash for UI
            const displayPath = path === '' ? '/' : '/' + path;
            currentPathElement.textContent = displayPath;
            updateBackButton();

            // Update URL parameter when navigating
            updateURLPath(path);

            // Use current domain and port instead of hardcoded localhost
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const wsUrl = `${protocol}//${window.location.host}/files?path=${encodeURIComponent(path)}`;

            ws = new WebSocket(wsUrl);

            ws.onopen = function(event) {
                console.log('WebSocket connected for path:', path);
            };

            ws.onmessage = handleMessage;

            ws.onclose = function(event) {
                console.log('WebSocket disconnected');
                hideSpinner();
            };

            ws.onerror = function(error) {
                console.error('WebSocket error:', error);
                hideSpinner();
            };
        }

        // Navigate to folder - use the path from server response directly
        function navigateToFolder(folderPath) {
            clearSelection(); // Clear selection when navigating
            connectWebSocket(folderPath);
        }

        // Navigate back to parent directory
        function navigateBack() {
            if (currentPath === '') return; // Already at root

            clearSelection(); // Clear selection when navigating back

            // Get parent path by removing the last segment
            const pathParts = currentPath.split('/');
            pathParts.pop(); // Remove last part
            const parentPath = pathParts.join('/');

            connectWebSocket(parentPath);
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            const writeMode = {{.WriteMode}};  // Changed to writeMode
            
            // Initialize lightbox
            reinitializeLightbox();

            // Add event listener for new tab button
            document.getElementById('addTabBtn').addEventListener('click', addNewTab);

            // Initialize button states
            updateButtonStates();

            // Disable buttons if NOT in write mode (read-only by default)
            if (!writeMode) {
                ['copyBtn', 'cutBtn', 'pasteBtn'].forEach(id => {
                    const btn = document.getElementById(id);
                    btn.disabled = true;
                    btn.classList.add('opacity-50', 'cursor-not-allowed');
                    btn.title = 'Read-only mode - use --write flag to enable file operations';
                });
            }
            // Add event listener for new tab button
            document.getElementById('addTabBtn').addEventListener('click', addNewTab);

            // Initialize button states
            updateButtonStates();

            // Get initial path from URL parameter
            currentPath = getPathFromURL();

            // Create first tab (will use path from URL or default to root)
            createTab();
        });
    </script>
</body>
</html>


